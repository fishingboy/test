<?php

use fishingboy\type_converter\Type_Converter;
use PHPUnit\Framework\TestCase;

class TypeConverterTest extends TestCase
{
    private $formatOutput;

    protected function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_case2()
    {
        $this->formatOutput = new Type_Converter('{
            "a" : "bool",        
            "b" : "int",        
            "c" : "str",
            "d" : ["int"]    
        }');
        $data = [
            "a" => 1,
            "b" => "2222",
            "c" => "3333",
            "d" => [
                "2222",
                "2112",
                "2332",
            ],
        ];

        $response = $this->formatOutput->convert($data);
        $this->assertIsObject($response);
    }

    public function test_轉換成整數()
    {
        $this->formatOutput = new Type_Converter('{"a" : "int"}');
        $response = $this->formatOutput->convert(["a" => "123"]);
        $this->assertEquals(123, $response->a);
        $this->assertIsInt($response->a);

        $response = $this->formatOutput->convert(["a" => "123.456"]);
        $this->assertEquals(123, $response->a);
        $this->assertIsInt($response->a);

        $response = $this->formatOutput->convert(["a" => "abc"]);
        $this->assertEquals(0, $response->a);
        $this->assertIsInt($response->a);
    }

    public function test_轉換成float()
    {
        $this->formatOutput = new Type_Converter('{"a" : "float"}');
        $response = $this->formatOutput->convert(["a" => "123"]);
        $this->assertEquals(123, $response->a);
        $this->assertIsFloat($response->a);

        $response = $this->formatOutput->convert(["a" => "123.456"]);
        $this->assertEquals(123.456, $response->a);
        $this->assertIsFloat($response->a);
    }

    public function test_轉換成布林()
    {
        $this->formatOutput = new Type_Converter('{"a" : "bool"}');
        $response = $this->formatOutput->convert(["a" => "123"]);
        $this->assertTrue($response->a);
        $this->assertIsBool($response->a);

        $response = $this->formatOutput->convert(["a" => "abc"]);
        $this->assertTrue($response->a);
        $this->assertIsBool($response->a);

        $response = $this->formatOutput->convert(["a" => "0"]);
        $this->assertFalse($response->a);
        $this->assertIsBool($response->a);
    }

    public function test_轉換成字串()
    {
        $this->formatOutput = new Type_Converter('{"a" : "str"}');
        $response = $this->formatOutput->convert(["a" => 123]);
        $this->assertEquals("123", $response->a);
        $this->assertIsString($response->a);

        $response = $this->formatOutput->convert(["a" => true]);
        $this->assertEquals("1", $response->a);
        $this->assertIsString($response->a);
    }

    public function test_轉換物件陣列()
    {
        $this->formatOutput = new Type_Converter('{"users":[{"name":"str","age":"int"}]}');
        $response = $this->formatOutput->convert([
            "users" => [
                ["name" => "leo", "age" => "123"],
                ["name" => "evonne", "age" => 123.456],
            ]
        ]);

        var_dump($response, true);

        $this->assertIsObject($response);
        $this->assertIsString($response->users[0]->name);
        $this->assertIsInt($response->users[0]->age);
        $this->assertIsString($response->users[1]->name);
        $this->assertIsInt($response->users[1]->age);
    }

    public function test_null轉換物件陣列()
    {
        $this->formatOutput = new Type_Converter('{"users":[{"name":"str","age":"int"}]}');
        $response = $this->formatOutput->convert(null);
        $this->assertNull($response);
    }

    public function test_轉換物件Fail()
    {
        $this->formatOutput = new Type_Converter('{"users":[{"name":"str","age":"int"}]}');

        $fail = false;
        try {
            $response = $this->formatOutput->convert([
                "users" => ["name" => "leo", "age" => "123"],
            ]);
        } catch (Exception $e) {
            $fail = true;
            $this->assertEquals("Can't convert string to object !!", $e->getMessage());
        }
        $this->assertTrue($fail);
    }
}
