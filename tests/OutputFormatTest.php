<?php

use PHPUnit\Framework\TestCase;

class OutputFormatTest extends TestCase
{
    private $formatOutput;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_case1()
    {
        $this->formatOutput = new TypeConverter('{
            "a" : "boolean",        
            "b" : "integer",        
            "c" : "string",
            "d" : ["integer"]    
        }');
        $format = $this->formatOutput->get_format();
        $this->assertIsObject($format);
    }

    public function test_case2()
    {
        $this->formatOutput = new TypeConverter('{
            "a" : "boolean",        
            "b" : "integer",        
            "c" : "string",
            "d" : ["integer"]    
        }');
        $data = [
            "a" => 1,
            "b" => "2222",
            "c" => "3333",
            "d" => [
                "2222",
                "2112",
                "2332",
            ],
        ];

        $response = $this->formatOutput->convert($data);
        $this->assertIsObject($response);
    }

    public function test_轉換成整數()
    {
        $this->formatOutput = new TypeConverter('{"a" : "integer"}');
        $response = $this->formatOutput->convert(["a" => "123"]);
        $this->assertEquals(123, $response->a);
        $this->assertIsInt($response->a);

        $response = $this->formatOutput->convert(["a" => "123.456"]);
        $this->assertEquals(123, $response->a);
        $this->assertIsInt($response->a);

        $response = $this->formatOutput->convert(["a" => "abc"]);
        $this->assertEquals(0, $response->a);
        $this->assertIsInt($response->a);
    }

    public function test_轉換成float()
    {
        $this->formatOutput = new TypeConverter('{"a" : "float"}');
        $response = $this->formatOutput->convert(["a" => "123"]);
        $this->assertEquals(123, $response->a);
        $this->assertIsFloat($response->a);

        $response = $this->formatOutput->convert(["a" => "123.456"]);
        $this->assertEquals(123.456, $response->a);
        $this->assertIsFloat($response->a);
    }

    public function test_轉換成布林()
    {
        $this->formatOutput = new TypeConverter('{"a" : "boolean"}');
        $response = $this->formatOutput->convert(["a" => "123"]);
        $this->assertTrue($response->a);
        $this->assertIsBool($response->a);

        $response = $this->formatOutput->convert(["a" => "abc"]);
        $this->assertTrue($response->a);
        $this->assertIsBool($response->a);

        $response = $this->formatOutput->convert(["a" => "0"]);
        $this->assertFalse($response->a);
        $this->assertIsBool($response->a);
    }

    public function test_轉換成字串()
    {
        $this->formatOutput = new TypeConverter('{"a" : "string"}');
        $response = $this->formatOutput->convert(["a" => 123]);
        $this->assertEquals("123", $response->a);
        $this->assertIsString($response->a);

        $response = $this->formatOutput->convert(["a" => true]);
        $this->assertEquals("1", $response->a);
        $this->assertIsString($response->a);
    }

    public function test_轉換物件陣列()
    {
        $this->formatOutput = new TypeConverter('{"users":[{"name":"string","age":"integer"}]}');
        $response = $this->formatOutput->convert([
            "users" => [
                ["name" => "leo", "age" => "123"],
                ["name" => true, "age" => 123.456],
                ["name" => true, "age" => 123.456],
            ]
        ]);
        $this->assertIsObject($response);
        $this->assertIsString($response->users[0]->name);
        $this->assertIsInt($response->users[0]->age);
        $this->assertIsString($response->users[1]->name);
        $this->assertIsInt($response->users[1]->age);
        $this->assertIsString($response->users[2]->name);
        $this->assertIsInt($response->users[2]->age);
    }

    public function test_null轉換物件陣列()
    {
        $this->formatOutput = new TypeConverter('{"users":[{"name":"string","age":"integer"}]}');
        $response = $this->formatOutput->convert(null);
        $this->assertNull($response);
    }

    public function test_轉換物件Fail()
    {
        $this->formatOutput = new TypeConverter('{"users":[{"name":"string","age":"integer"}]}');

        $fail = false;
        try {
            $response = $this->formatOutput->convert([
                "users" => ["name" => "leo", "age" => "123"],
            ]);
        } catch (Exception $e) {
            $fail = true;
            $this->assertEquals("Can't convert string to object !!", $e->getMessage());
        }
        $this->assertTrue($fail);
    }
}

/**
 * API Output 正規化
 * @author Leo.Kuo <fishingboy@gmail.com>
 */
class TypeConverter
{
    private $format = null;

    public function __construct($format)
    {
        $this->format = json_decode($format);
    }

    /**
     * 轉換型別
     * @param $value
     * @param mixed $format
     * @return mixed
     * @throws Exception
     */
    public function convert($value, $format = null)
    {
        $format = isset($format) ? $format : $this->format;

        if ($value === null) {
            return null;
        }

        if (is_object($format)) {
            // 物件
            if (is_array($value)) {
                $value = (object) $value;
            } else {
                $type = gettype($value);
                throw new Exception("Can't convert {$type} to object !!");
            }

            foreach ($format as $key => $sub_format) {
                if (property_exists($value, $key)) {
                    $value->$key = $this->convert($value->$key, $sub_format);
                } else {
                    $value->$key = null;
                }
            }
            return $value;
        } else if (is_array($format)) {
            // 陣列
            if (! is_array($value)) {
                return null;
            }

            $sub_format = $format[0];
            foreach ($value as $i => $val) {
                $value[$i] = $this->convert($value[$i], $sub_format);
            }
            return $value;
        } else {
            // 值
            switch ($format) {
                // 整數
                case "integer":
                    return intval($value);

                // 浮點數
                case "float":
                    return floatval($value);

                // 字串
                case "string":
                    return strval($value);

                // 布林
                case "boolean":
                    return boolval($value);

                // 未定義
                default:
                    return $value;
            }
        }
    }
}
